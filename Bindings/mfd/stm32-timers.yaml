# SPDX-License-Identifier: None
%YAML 1.2
---
$id: http://devicetree.org/schemas/Bindings/mfd/stm32-timers.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#
version: 1

title: STM32 Timers driver bindings

maintainers:
  - Benjamin Gaignard <benjamin.gaignard@linaro.org>
description: |
  This IP provides 3 types of timer along with PWM functionality:
  - advanced-control timers consist of a 16-bit auto-reload counter driven by a programmable
    prescaler, break input feature, PWM outputs and complementary PWM ouputs channels.
  - general-purpose timers consist of a 16-bit or 32-bit auto-reload counter driven by a
    programmable prescaler and PWM outputs.
  - basic timers consist of a 16-bit auto-reload counter driven by a programmable prescaler.

  Required parameters:
  - compatible: must be "st,stm32-timers"

  - reg:			Physical base address and length of the controller's
  			registers.
  - clock-names:		Set to "int".
  - clocks: 		Phandle to the clock used by the timer module.
  			For Clk properties, please refer to ../clock/clock-bindings.txt

  Optional parameters:
  - resets:		Phandle to the parent reset controller.
  			See ../reset/st,stm32-rcc.txt

  Optional subnodes:
  - pwm:			See ../pwm/pwm-stm32.txt
  - timer:		See ../iio/timer/stm32-timer-trigger.txt

  Example:
  	timers@40010000 {
  		#address-cells = <1>;
  		#size-cells = <0>;
  		compatible = "st,stm32-timers";
  		reg = <0x40010000 0x400>;
  		clocks = <&rcc 0 160>;
  		clock-names = "int";

  		pwm {
  			compatible = "st,stm32-pwm";
  			pinctrl-0	= <&pwm1_pins>;
  			pinctrl-names	= "default";
  		};

  		timer@0 {
  			compatible = "st,stm32-timer-trigger";
  			reg = <0>;
  		};
  	};
             

properties:
  compatible:
    items:
      - const: st,stm32-timers
    minItems: 1
    maxItems: 1
    additionalItems: false
  '#address-cells':
    const: 0x1
  '#size-cells':
    const: 0x0
  reg:
    minItems: 1
    maxItems: 1
    additionalItems: false
  clocks: {}
  clock-names:
    items:
      - const: int
    minItems: 1
    maxItems: 1
    additionalItems: false
examples:
  - |
    timers@40010000 {
      #address-cells = <1>;
      #size-cells = <0>;
      compatible = "st,stm32-timers";
      reg = <0x40010000 0x400>;
      clocks = <&rcc 0 160>;
      clock-names = "int";

      pwm {
        compatible = "st,stm32-pwm";
        pinctrl-0  = <&pwm1_pins>;
        pinctrl-names  = "default";
      };

      timer@0 {
        compatible = "st,stm32-timer-trigger";
        reg = <0>;
      };
    };
historical: |+
  STM32 Timers driver bindings

  This IP provides 3 types of timer along with PWM functionality:
  - advanced-control timers consist of a 16-bit auto-reload counter driven by a programmable
    prescaler, break input feature, PWM outputs and complementary PWM ouputs channels.
  - general-purpose timers consist of a 16-bit or 32-bit auto-reload counter driven by a
    programmable prescaler and PWM outputs.
  - basic timers consist of a 16-bit auto-reload counter driven by a programmable prescaler.

  Required parameters:
  - compatible: must be "st,stm32-timers"

  - reg:			Physical base address and length of the controller's
  			registers.
  - clock-names:		Set to "int".
  - clocks: 		Phandle to the clock used by the timer module.
  			For Clk properties, please refer to ../clock/clock-bindings.txt

  Optional parameters:
  - resets:		Phandle to the parent reset controller.
  			See ../reset/st,stm32-rcc.txt

  Optional subnodes:
  - pwm:			See ../pwm/pwm-stm32.txt
  - timer:		See ../iio/timer/stm32-timer-trigger.txt

...
