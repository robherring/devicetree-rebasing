# SPDX-License-Identifier: None
%YAML 1.2
---
$id: http://devicetree.org/schemas/Bindings/mtd/partition.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#
version: 1

title: Flash partitions in device tree

maintainers:
  - Jamie Lentin <jm@lentin.co.uk>
  - Brian Norris <computersforpeace@gmail.com>
description: |+
  Flash devices can be partitioned into one or more functional ranges (e.g. "boot
  code", "nvram", "kernel").

  Different devices may be partitioned in a different ways. Some may use a fixed
  flash layout set at production time. Some may use on-flash table that describes
  the geometry and naming/purpose of each functional region. It is also possible
  to see these methods mixed.

  To assist system software in locating partitions, we allow describing which
  method is used for a given flash device. To describe the method there should be
  a subnode of the flash device that is named 'partitions'. It must have a
  'compatible' property, which is used to identify the method to use.

  We currently only document a binding for fixed layouts.


  Fixed Partitions
  ================

  Partitions can be represented by sub-nodes of a flash device. This can be used
  on platforms which have strong conventions about which portions of a flash are
  used for what purposes, but which don't use an on-flash partition table such
  as RedBoot.

  The partition table should be a subnode of the flash node and should be named
  'partitions'. This node should have the following property:
  - compatible : (required) must be "fixed-partitions"
  Partitions are then defined in subnodes of the partitions node.

  For backwards compatibility partitions as direct subnodes of the flash device are
  supported. This use is discouraged.
  NOTE: also for backwards compatibility, direct subnodes that have a compatible
  string are not considered partitions, as they may be used for other bindings.

  #address-cells & #size-cells must both be present in the partitions subnode of the
  flash device. There are two valid values for both:
  <1>: for partitions that require a single 32-bit cell to represent their
       size/address (aka the value is below 4 GiB)
  <2>: for partitions that require two 32-bit cells to represent their
       size/address (aka the value is 4 GiB or greater).

             

properties:
  compatible:
    items:
      - const: fixed-partitions
    minItems: 1
    maxItems: 1
    additionalItems: false
  '#address-cells':
    const: 0x1
  '#size-cells':
    const: 0x1
historical: |+
  Flash partitions in device tree
  ===============================

  Flash devices can be partitioned into one or more functional ranges (e.g. "boot
  code", "nvram", "kernel").

  Different devices may be partitioned in a different ways. Some may use a fixed
  flash layout set at production time. Some may use on-flash table that describes
  the geometry and naming/purpose of each functional region. It is also possible
  to see these methods mixed.

  To assist system software in locating partitions, we allow describing which
  method is used for a given flash device. To describe the method there should be
  a subnode of the flash device that is named 'partitions'. It must have a
  'compatible' property, which is used to identify the method to use.

  We currently only document a binding for fixed layouts.


  Fixed Partitions
  ================

  Partitions can be represented by sub-nodes of a flash device. This can be used
  on platforms which have strong conventions about which portions of a flash are
  used for what purposes, but which don't use an on-flash partition table such
  as RedBoot.

  The partition table should be a subnode of the flash node and should be named
  'partitions'. This node should have the following property:
  - compatible : (required) must be "fixed-partitions"
  Partitions are then defined in subnodes of the partitions node.

  For backwards compatibility partitions as direct subnodes of the flash device are
  supported. This use is discouraged.
  NOTE: also for backwards compatibility, direct subnodes that have a compatible
  string are not considered partitions, as they may be used for other bindings.

  #address-cells & #size-cells must both be present in the partitions subnode of the
  flash device. There are two valid values for both:
  <1>: for partitions that require a single 32-bit cell to represent their
       size/address (aka the value is below 4 GiB)
  <2>: for partitions that require two 32-bit cells to represent their
       size/address (aka the value is 4 GiB or greater).

  Required properties:
  - reg : The partition's offset and size within the flash

  Optional properties:
  - label : The label / name for this partition.  If omitted, the label is taken
    from the node name (excluding the unit address).
  - read-only : This parameter, if present, is a hint to Linux that this
    partition should only be mounted read-only. This is usually used for flash
    partitions containing early-boot firmware images or data which should not be
    clobbered.
  - lock : Do not unlock the partition at initialization time (not supported on
    all devices)

...
