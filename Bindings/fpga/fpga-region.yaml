# SPDX-License-Identifier: None
%YAML 1.2
---
$id: http://devicetree.org/schemas/Bindings/fpga/fpga-region.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#
version: 1

title: FPGA Region Device Tree Binding

maintainers:
  - Alan Tull <atull@opensource.altera.com>
description: |+
  Alan Tull 2016

   CONTENTS
   - Introduction
   - Terminology
   - Sequence
   - FPGA Region
   - Supported Use Models
   - Device Tree Examples
   - Constraints


  Introduction
  ============

  FPGA Regions represent FPGA's and partial reconfiguration regions of FPGA's in
  the Device Tree.  FPGA Regions provide a way to program FPGAs under device tree
  control.

  This device tree binding document hits some of the high points of FPGA usage and
  attempts to include terminology used by both major FPGA manufacturers.  This
  document isn't a replacement for any manufacturers specifications for FPGA
  usage.


  Terminology
  ===========

  Full Reconfiguration
   * The entire FPGA is programmed.

  Partial Reconfiguration (PR)
   * A section of an FPGA is reprogrammed while the rest of the FPGA is not
     affected.
   * Not all FPGA's support PR.

  Partial Reconfiguration Region (PRR)
   * Also called a "reconfigurable partition"
   * A PRR is a specific section of a FPGA reserved for reconfiguration.
   * A base (or static) FPGA image may create a set of PRR's that later may
     be independently reprogrammed many times.
   * The size and specific location of each PRR is fixed.
   * The connections at the edge of each PRR are fixed.  The image that is loaded
     into a PRR must fit and must use a subset of the region's connections.
   * The busses within the FPGA are split such that each region gets its own
     branch that may be gated independently.

  Persona
   * Also called a "partial bit stream"
   * An FPGA image that is designed to be loaded into a PRR.  There may be
     any number of personas designed to fit into a PRR, but only one at at time
     may be loaded.
   * A persona may create more regions.

  FPGA Bridge
   * FPGA Bridges gate bus signals between a host and FPGA.
   * FPGA Bridges should be disabled while the FPGA is being programmed to
     prevent spurious signals on the cpu bus and to the soft logic.
   * FPGA bridges may be actual hardware or soft logic on an FPGA.
   * During Full Reconfiguration, hardware bridges between the host and FPGA
     will be disabled.
   * During Partial Reconfiguration of a specific region, that region's bridge
     will be used to gate the busses.  Traffic to other regions is not affected.
   * In some implementations, the FPGA Manager transparantly handles gating the
     buses, eliminating the need to show the hardware FPGA bridges in the
     device tree.
   * An FPGA image may create a set of reprogrammable regions, each having its
     own bridge and its own split of the busses in the FPGA.

  FPGA Manager
   * An FPGA Manager is a hardware block that programs an FPGA under the control
     of a host processor.

  Base Image
   * Also called the "static image"
   * An FPGA image that is designed to do full reconfiguration of the FPGA.
   * A base image may set up a set of partial reconfiguration regions that may
     later be reprogrammed.

      ----------------       ----------------------------------
      |  Host CPU    |       |             FPGA               |
      |              |       |                                |
      |          ----|       |       -----------    --------  |
      |          | H |       |   |==>| Bridge0 |<==>| PRR0 |  |
      |          | W |       |   |   -----------    --------  |
      |          |   |       |   |                            |
      |          | B |<=====>|<==|   -----------    --------  |
      |          | R |       |   |==>| Bridge1 |<==>| PRR1 |  |
      |          | I |       |   |   -----------    --------  |
      |          | D |       |   |                            |
      |          | G |       |   |   -----------    --------  |
      |          | E |       |   |==>| Bridge2 |<==>| PRR2 |  |
      |          ----|       |       -----------    --------  |
      |              |       |                                |
      ----------------       ----------------------------------

  Figure 1: An FPGA set up with a base image that created three regions.  Each
  region (PRR0-2) gets its own split of the busses that is independently gated by
  a soft logic bridge (Bridge0-2) in the FPGA.  The contents of each PRR can be
  reprogrammed independently while the rest of the system continues to function.


  Sequence
  ========

  When a DT overlay that targets a FPGA Region is applied, the FPGA Region will
  do the following:

   1. Disable appropriate FPGA bridges.
   2. Program the FPGA using the FPGA manager.
   3. Enable the FPGA bridges.
   4. The Device Tree overlay is accepted into the live tree.
   5. Child devices are populated.

  When the overlay is removed, the child nodes will be removed and the FPGA Region
  will disable the bridges.


  FPGA Region
  ===========

  FPGA Regions represent FPGA's and FPGA PR regions in the device tree.  An FPGA
  Region brings together the elements needed to program on a running system and
  add the child devices:

   * FPGA Manager
   * FPGA Bridges
   * image-specific information needed to to the programming.
   * child nodes

  The intended use is that a Device Tree overlay (DTO) can be used to reprogram an
  FPGA while an operating system is running.

  An FPGA Region that exists in the live Device Tree reflects the current state.
  If the live tree shows a "firmware-name" property or child nodes under a FPGA
  Region, the FPGA already has been programmed.  A DTO that targets a FPGA Region
  and adds the "firmware-name" property is taken as a request to reprogram the
  FPGA.  After reprogramming is successful, the overlay is accepted into the live
  tree.

  The base FPGA Region in the device tree represents the FPGA and supports full
  reconfiguration.  It must include a phandle to an FPGA Manager.  The base
  FPGA region will be the child of one of the hardware bridges (the bridge that
  allows register access) between the cpu and the FPGA.  If there are more than
  one bridge to control during FPGA programming, the region will also contain a
  list of phandles to the additional hardware FPGA Bridges.

  For partial reconfiguration (PR), each PR region will have an FPGA Region.
  These FPGA regions are children of FPGA bridges which are then children of the
  base FPGA region.  The "Full Reconfiguration to add PRR's" example below shows
  this.

  If an FPGA Region does not specify a FPGA Manager, it will inherit the FPGA
  Manager specified by its ancestor FPGA Region.  This supports both the case
  where the same FPGA Manager is used for all of a FPGA as well the case where
  a different FPGA Manager is used for each region.

  FPGA Regions do not inherit their ancestor FPGA regions' bridges.  This prevents
  shutting down bridges that are upstream from the other active regions while one
  region is getting reconfigured (see Figure 1 above).  During PR, the FPGA's
  hardware bridges remain enabled.  The PR regions' bridges will be FPGA bridges
  within the static image of the FPGA.

             

properties:
  compatible:
    items:
      - const: fpga-region
    minItems: 1
    maxItems: 1
    additionalItems: false
  fpga-mgr: {}
  '#address-cells':
    const: 0x1
  '#size-cells':
    const: 0x1
  ranges: {}
historical: |+
  FPGA Region Device Tree Binding

  Alan Tull 2016

   CONTENTS
   - Introduction
   - Terminology
   - Sequence
   - FPGA Region
   - Supported Use Models
   - Device Tree Examples
   - Constraints


  Introduction
  ============

  FPGA Regions represent FPGA's and partial reconfiguration regions of FPGA's in
  the Device Tree.  FPGA Regions provide a way to program FPGAs under device tree
  control.

  This device tree binding document hits some of the high points of FPGA usage and
  attempts to include terminology used by both major FPGA manufacturers.  This
  document isn't a replacement for any manufacturers specifications for FPGA
  usage.


  Terminology
  ===========

  Full Reconfiguration
   * The entire FPGA is programmed.

  Partial Reconfiguration (PR)
   * A section of an FPGA is reprogrammed while the rest of the FPGA is not
     affected.
   * Not all FPGA's support PR.

  Partial Reconfiguration Region (PRR)
   * Also called a "reconfigurable partition"
   * A PRR is a specific section of a FPGA reserved for reconfiguration.
   * A base (or static) FPGA image may create a set of PRR's that later may
     be independently reprogrammed many times.
   * The size and specific location of each PRR is fixed.
   * The connections at the edge of each PRR are fixed.  The image that is loaded
     into a PRR must fit and must use a subset of the region's connections.
   * The busses within the FPGA are split such that each region gets its own
     branch that may be gated independently.

  Persona
   * Also called a "partial bit stream"
   * An FPGA image that is designed to be loaded into a PRR.  There may be
     any number of personas designed to fit into a PRR, but only one at at time
     may be loaded.
   * A persona may create more regions.

  FPGA Bridge
   * FPGA Bridges gate bus signals between a host and FPGA.
   * FPGA Bridges should be disabled while the FPGA is being programmed to
     prevent spurious signals on the cpu bus and to the soft logic.
   * FPGA bridges may be actual hardware or soft logic on an FPGA.
   * During Full Reconfiguration, hardware bridges between the host and FPGA
     will be disabled.
   * During Partial Reconfiguration of a specific region, that region's bridge
     will be used to gate the busses.  Traffic to other regions is not affected.
   * In some implementations, the FPGA Manager transparantly handles gating the
     buses, eliminating the need to show the hardware FPGA bridges in the
     device tree.
   * An FPGA image may create a set of reprogrammable regions, each having its
     own bridge and its own split of the busses in the FPGA.

  FPGA Manager
   * An FPGA Manager is a hardware block that programs an FPGA under the control
     of a host processor.

  Base Image
   * Also called the "static image"
   * An FPGA image that is designed to do full reconfiguration of the FPGA.
   * A base image may set up a set of partial reconfiguration regions that may
     later be reprogrammed.

      ----------------       ----------------------------------
      |  Host CPU    |       |             FPGA               |
      |              |       |                                |
      |          ----|       |       -----------    --------  |
      |          | H |       |   |==>| Bridge0 |<==>| PRR0 |  |
      |          | W |       |   |   -----------    --------  |
      |          |   |       |   |                            |
      |          | B |<=====>|<==|   -----------    --------  |
      |          | R |       |   |==>| Bridge1 |<==>| PRR1 |  |
      |          | I |       |   |   -----------    --------  |
      |          | D |       |   |                            |
      |          | G |       |   |   -----------    --------  |
      |          | E |       |   |==>| Bridge2 |<==>| PRR2 |  |
      |          ----|       |       -----------    --------  |
      |              |       |                                |
      ----------------       ----------------------------------

  Figure 1: An FPGA set up with a base image that created three regions.  Each
  region (PRR0-2) gets its own split of the busses that is independently gated by
  a soft logic bridge (Bridge0-2) in the FPGA.  The contents of each PRR can be
  reprogrammed independently while the rest of the system continues to function.


  Sequence
  ========

  When a DT overlay that targets a FPGA Region is applied, the FPGA Region will
  do the following:

   1. Disable appropriate FPGA bridges.
   2. Program the FPGA using the FPGA manager.
   3. Enable the FPGA bridges.
   4. The Device Tree overlay is accepted into the live tree.
   5. Child devices are populated.

  When the overlay is removed, the child nodes will be removed and the FPGA Region
  will disable the bridges.


  FPGA Region
  ===========

  FPGA Regions represent FPGA's and FPGA PR regions in the device tree.  An FPGA
  Region brings together the elements needed to program on a running system and
  add the child devices:

   * FPGA Manager
   * FPGA Bridges
   * image-specific information needed to to the programming.
   * child nodes

  The intended use is that a Device Tree overlay (DTO) can be used to reprogram an
  FPGA while an operating system is running.

  An FPGA Region that exists in the live Device Tree reflects the current state.
  If the live tree shows a "firmware-name" property or child nodes under a FPGA
  Region, the FPGA already has been programmed.  A DTO that targets a FPGA Region
  and adds the "firmware-name" property is taken as a request to reprogram the
  FPGA.  After reprogramming is successful, the overlay is accepted into the live
  tree.

  The base FPGA Region in the device tree represents the FPGA and supports full
  reconfiguration.  It must include a phandle to an FPGA Manager.  The base
  FPGA region will be the child of one of the hardware bridges (the bridge that
  allows register access) between the cpu and the FPGA.  If there are more than
  one bridge to control during FPGA programming, the region will also contain a
  list of phandles to the additional hardware FPGA Bridges.

  For partial reconfiguration (PR), each PR region will have an FPGA Region.
  These FPGA regions are children of FPGA bridges which are then children of the
  base FPGA region.  The "Full Reconfiguration to add PRR's" example below shows
  this.

  If an FPGA Region does not specify a FPGA Manager, it will inherit the FPGA
  Manager specified by its ancestor FPGA Region.  This supports both the case
  where the same FPGA Manager is used for all of a FPGA as well the case where
  a different FPGA Manager is used for each region.

  FPGA Regions do not inherit their ancestor FPGA regions' bridges.  This prevents
  shutting down bridges that are upstream from the other active regions while one
  region is getting reconfigured (see Figure 1 above).  During PR, the FPGA's
  hardware bridges remain enabled.  The PR regions' bridges will be FPGA bridges
  within the static image of the FPGA.

  Required properties:
  - compatible : should contain "fpga-region"
  - fpga-mgr : should contain a phandle to an FPGA Manager.  Child FPGA Regions
  	inherit this property from their ancestor regions.  A fpga-mgr property
  	in a region will override any inherited FPGA manager.
  - #address-cells, #size-cells, ranges : must be present to handle address space
  	mapping for child nodes.

  Optional properties:
  - firmware-name : should contain the name of an FPGA image file located on the
  	firmware search path.  If this property shows up in a live device tree
  	it indicates that the FPGA has already been programmed with this image.
  	If this property is in an overlay targeting a FPGA region, it is a
  	request to program the FPGA with that image.
  - fpga-bridges : should contain a list of phandles to FPGA Bridges that must be
  	controlled during FPGA programming along with the parent FPGA bridge.
  	This property is optional if the FPGA Manager handles the bridges.
          If the fpga-region is  the child of a fpga-bridge, the list should not
          contain the parent bridge.
  - partial-fpga-config : boolean, set if partial reconfiguration is to be done,
  	otherwise full reconfiguration is done.
  - external-fpga-config : boolean, set if the FPGA has already been configured
  	prior to OS boot up.
  - encrypted-fpga-config : boolean, set if the bitstream is encrypted
  - region-unfreeze-timeout-us : The maximum time in microseconds to wait for
  	bridges to successfully become enabled after the region has been
  	programmed.
  - region-freeze-timeout-us : The maximum time in microseconds to wait for
  	bridges to successfully become disabled before the region has been
  	programmed.
  - config-complete-timeout-us : The maximum time in microseconds time for the
  	FPGA to go to operating mode after the region has been programmed.
  - child nodes : devices in the FPGA after programming.

  In the example below, when an overlay is applied targeting fpga-region0,
  fpga_mgr is used to program the FPGA.  Two bridges are controlled during
  programming: the parent fpga_bridge0 and fpga_bridge1.  Because the region is
  the child of fpga_bridge0, only fpga_bridge1 needs to be specified in the
  fpga-bridges property.  During programming, these bridges are disabled, the
  firmware specified in the overlay is loaded to the FPGA using the FPGA manager
  specified in the region.  If FPGA programming succeeds, the bridges are
  reenabled and the overlay makes it into the live device tree.  The child devices
  are then populated.  If FPGA programming fails, the bridges are left disabled
  and the overlay is rejected.  The overlay's ranges property maps the lwhps
  bridge's region (0xff200000) and the hps bridge's region (0xc0000000) for use by
  the two child devices.

...
