# SPDX-License-Identifier: None
%YAML 1.2
---
$id: http://devicetree.org/schemas/Bindings/pci/mvebu-pci.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#
version: 1

title: Marvell EBU PCIe interfaces

maintainers:
  - Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
description: test

properties:
  compatible:
    items:
      - enum:
          - marvell,dove-pcie
          - marvell,kirkwood-pcie
          - marvell,armada-370-pcie
          - marvell,armada-xp-pcie
    minItems: 1
    maxItems: 1
    additionalItems: false
  device_type:
    items:
      - const: pci
    minItems: 1
    maxItems: 1
    additionalItems: false
  '#address-cells':
    const: 0x3
  '#size-cells':
    const: 0x2
  bus-range: {}
  ranges: {}
  msi-parent: {}
historical: |+
  * Marvell EBU PCIe interfaces

  Mandatory properties:

  - compatible: one of the following values:
      marvell,armada-370-pcie
      marvell,armada-xp-pcie
      marvell,dove-pcie
      marvell,kirkwood-pcie
  - #address-cells, set to <3>
  - #size-cells, set to <2>
  - #interrupt-cells, set to <1>
  - bus-range: PCI bus numbers covered
  - device_type, set to "pci"
  - ranges: ranges describing the MMIO registers to control the PCIe
    interfaces, and ranges describing the MBus windows needed to access
    the memory and I/O regions of each PCIe interface.
  - msi-parent: Link to the hardware entity that serves as the Message
    Signaled Interrupt controller for this PCI controller.

  The ranges describing the MMIO registers have the following layout:

      0x82000000 0 r MBUS_ID(0xf0, 0x01) r 0 s

  where:

    * r is a 32-bits value that gives the offset of the MMIO
    registers of this PCIe interface, from the base of the internal
    registers.

    * s is a 32-bits value that give the size of this MMIO
    registers area. This range entry translates the '0x82000000 0 r' PCI
    address into the 'MBUS_ID(0xf0, 0x01) r' CPU address, which is part
    of the internal register window (as identified by MBUS_ID(0xf0,
    0x01)).

  The ranges describing the MBus windows have the following layout:

      0x8t000000 s 0     MBUS_ID(w, a) 0 1 0

  where:

     * t is the type of the MBus window (as defined by the standard PCI DT
     bindings), 1 for I/O and 2 for memory.

     * s is the PCI slot that corresponds to this PCIe interface

     * w is the 'target ID' value for the MBus window

     * a the 'attribute' value for the MBus window.

  Since the location and size of the different MBus windows is not fixed in
  hardware, and only determined in runtime, those ranges cover the full first
  4 GB of the physical address space, and do not translate into a valid CPU
  address.

  In addition, the device tree node must have sub-nodes describing each
  PCIe interface, having the following mandatory properties:

  - reg: used only for interrupt mapping, so only the first four bytes
    are used to refer to the correct bus number and device number.
  - assigned-addresses: reference to the MMIO registers used to control
    this PCIe interface.
  - clocks: the clock associated to this PCIe interface
  - marvell,pcie-port: the physical PCIe port number
  - status: either "disabled" or "okay"
  - device_type, set to "pci"
  - #address-cells, set to <3>
  - #size-cells, set to <2>
  - #interrupt-cells, set to <1>
  - ranges, translating the MBus windows ranges of the parent node into
    standard PCI addresses.
  - interrupt-map-mask and interrupt-map, standard PCI properties to
    define the mapping of the PCIe interface to interrupt numbers.

  and the following optional properties:
  - marvell,pcie-lane: the physical PCIe lane number, for ports having
    multiple lanes. If this property is not found, we assume that the
    value is 0.
  - reset-gpios: optional GPIO to PERST#
  - reset-delay-us: delay in us to wait after reset de-assertion, if not
    specified will default to 100ms, as required by the PCIe specification.

...
