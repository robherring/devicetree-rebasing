# SPDX-License-Identifier: None
%YAML 1.2
---
$id: http://devicetree.org/schemas/Bindings/phy/nvidia,tegra124-xusb-padctl.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#
version: 1

title: Device tree binding for NVIDIA Tegra XUSB pad controller

maintainers:
  - Thierry Reding <treding@nvidia.com>
description: |+
  The Tegra XUSB pad controller manages a set of I/O lanes (with differential
  signals) which connect directly to pins/pads on the SoC package. Each lane
  is controlled by a HW block referred to as a "pad" in the Tegra hardware
  documentation. Each such "pad" may control either one or multiple lanes,
  and thus contains any logic common to all its lanes. Each lane can be
  separately configured and powered up.

  Some of the lanes are high-speed lanes, which can be used for PCIe, SATA or
  super-speed USB. Other lanes are for various types of low-speed, full-speed
  or high-speed USB (such as UTMI, ULPI and HSIC). The XUSB pad controller
  contains a software-configurable mux that sits between the I/O controller
  ports (e.g. PCIe) and the lanes.

  In addition to per-lane configuration, USB 3.0 ports may require additional
  settings on a per-board basis.

  Pads will be represented as children of the top-level XUSB pad controller
  device tree node. Each lane exposed by the pad will be represented by its
  own subnode and can be referenced by users of the lane using the standard
  PHY bindings, as described by the phy-bindings.txt file in this directory.

  The Tegra hardware documentation refers to the connection between the XUSB
  pad controller and the XUSB controller as "ports". This is confusing since
  "port" is typically used to denote the physical USB receptacle. The device
  tree binding in this document uses the term "port" to refer to the logical
  abstraction of the signals that are routed to a USB receptacle (i.e. a PHY
  for the USB signal, the VBUS power supply, the USB 2.0 companion port for
  USB 3.0 receptacles, ...).

             

properties:
  compatible: {}
historical: |+
  Device tree binding for NVIDIA Tegra XUSB pad controller
  ========================================================

  The Tegra XUSB pad controller manages a set of I/O lanes (with differential
  signals) which connect directly to pins/pads on the SoC package. Each lane
  is controlled by a HW block referred to as a "pad" in the Tegra hardware
  documentation. Each such "pad" may control either one or multiple lanes,
  and thus contains any logic common to all its lanes. Each lane can be
  separately configured and powered up.

  Some of the lanes are high-speed lanes, which can be used for PCIe, SATA or
  super-speed USB. Other lanes are for various types of low-speed, full-speed
  or high-speed USB (such as UTMI, ULPI and HSIC). The XUSB pad controller
  contains a software-configurable mux that sits between the I/O controller
  ports (e.g. PCIe) and the lanes.

  In addition to per-lane configuration, USB 3.0 ports may require additional
  settings on a per-board basis.

  Pads will be represented as children of the top-level XUSB pad controller
  device tree node. Each lane exposed by the pad will be represented by its
  own subnode and can be referenced by users of the lane using the standard
  PHY bindings, as described by the phy-bindings.txt file in this directory.

  The Tegra hardware documentation refers to the connection between the XUSB
  pad controller and the XUSB controller as "ports". This is confusing since
  "port" is typically used to denote the physical USB receptacle. The device
  tree binding in this document uses the term "port" to refer to the logical
  abstraction of the signals that are routed to a USB receptacle (i.e. a PHY
  for the USB signal, the VBUS power supply, the USB 2.0 companion port for
  USB 3.0 receptacles, ...).

  Required properties:
  --------------------
  - compatible: Must be:
    - Tegra124: "nvidia,tegra124-xusb-padctl"
    - Tegra132: "nvidia,tegra132-xusb-padctl", "nvidia,tegra124-xusb-padctl"
    - Tegra210: "nvidia,tegra210-xusb-padctl"
  - reg: Physical base address and length of the controller's registers.
  - resets: Must contain an entry for each entry in reset-names.
  - reset-names: Must include the following entries:
    - "padctl"


  Pad nodes:
  ==========

  A required child node named "pads" contains a list of subnodes, one for each
  of the pads exposed by the XUSB pad controller. Each pad may need additional
  resources that can be referenced in its pad node.

  The "status" property is used to enable or disable the use of a pad. If set
  to "disabled", the pad will not be used on the given board. In order to use
  the pad and any of its lanes, this property must be set to "okay".

  For Tegra124 and Tegra132, the following pads exist: usb2, ulpi, hsic, pcie
  and sata. No extra resources are required for operation of these pads.

  For Tegra210, the following pads exist: usb2, hsic, pcie and sata. Below is
  a description of the properties of each pad.

  UTMI pad:
  ---------

  Required properties:
  - clocks: Must contain an entry for each entry in clock-names.
  - clock-names: Must contain the following entries:
    - "trk": phandle and specifier referring to the USB2 tracking clock

  HSIC pad:
  ---------

  Required properties:
  - clocks: Must contain an entry for each entry in clock-names.
  - clock-names: Must contain the following entries:
    - "trk": phandle and specifier referring to the HSIC tracking clock

  PCIe pad:
  ---------

  Required properties:
  - clocks: Must contain an entry for each entry in clock-names.
  - clock-names: Must contain the following entries:
    - "pll": phandle and specifier referring to the PLLE
  - resets: Must contain an entry for each entry in reset-names.
  - reset-names: Must contain the following entries:
    - "phy": reset for the PCIe UPHY block

  SATA pad:
  ---------

  Required properties:
  - resets: Must contain an entry for each entry in reset-names.
  - reset-names: Must contain the following entries:
    - "phy": reset for the SATA UPHY block


  PHY nodes:
  ==========

  Each pad node has a child named "lanes" that contains one or more children of
  its own, each representing one of the lanes controlled by the pad.

  Required properties:
  --------------------
  - status: Defines the operation status of the PHY. Valid values are:
    - "disabled": the PHY is disabled
    - "okay": the PHY is enabled
  - #phy-cells: Should be 0. Since each lane represents a single PHY, there is
    no need for an additional specifier.
  - nvidia,function: The output function of the PHY. See below for a list of
    valid functions per SoC generation.

  For Tegra124 and Tegra132, the list of valid PHY nodes is given below:
  - usb2: usb2-0, usb2-1, usb2-2
    - functions: "snps", "xusb", "uart"
  - ulpi: ulpi-0
    - functions: "snps", "xusb"
  - hsic: hsic-0, hsic-1
    - functions: "snps", "xusb"
  - pcie: pcie-0, pcie-1, pcie-2, pcie-3, pcie-4
    - functions: "pcie", "usb3-ss"
  - sata: sata-0
    - functions: "usb3-ss", "sata"

  For Tegra210, the list of valid PHY nodes is given below:
  - usb2: usb2-0, usb2-1, usb2-2, usb2-3
    - functions: "snps", "xusb", "uart"
  - hsic: hsic-0, hsic-1
    - functions: "snps", "xusb"
  - pcie: pcie-0, pcie-1, pcie-2, pcie-3, pcie-4, pcie-5, pcie-6
    - functions: "pcie-x1", "usb3-ss", "pcie-x4"
  - sata: sata-0
    - functions: "usb3-ss", "sata"


  Port nodes:
  ===========

  A required child node named "ports" contains a list of all the ports exposed
  by the XUSB pad controller. Per-port configuration is only required for USB.

  USB2 ports:
  -----------

  Required properties:
  - status: Defines the operation status of the port. Valid values are:
    - "disabled": the port is disabled
    - "okay": the port is enabled
  - mode: A string that determines the mode in which to run the port. Valid
    values are:
    - "host": for USB host mode
    - "device": for USB device mode
    - "otg": for USB OTG mode

  Optional properties:
  - nvidia,internal: A boolean property whose presence determines that a port
    is internal. In the absence of this property the port is considered to be
    external.
  - vbus-supply: phandle to a regulator supplying the VBUS voltage.

  ULPI ports:
  -----------

  Optional properties:
  - status: Defines the operation status of the port. Valid values are:
    - "disabled": the port is disabled
    - "okay": the port is enabled
  - nvidia,internal: A boolean property whose presence determines that a port
    is internal. In the absence of this property the port is considered to be
    external.
  - vbus-supply: phandle to a regulator supplying the VBUS voltage.

  HSIC ports:
  -----------

  Required properties:
  - status: Defines the operation status of the port. Valid values are:
    - "disabled": the port is disabled
    - "okay": the port is enabled

  Optional properties:
  - vbus-supply: phandle to a regulator supplying the VBUS voltage.

  Super-speed USB ports:
  ----------------------

  Required properties:
  - status: Defines the operation status of the port. Valid values are:
    - "disabled": the port is disabled
    - "okay": the port is enabled
  - nvidia,usb2-companion: A single cell that specifies the physical port number
    to map this super-speed USB port to. The range of valid port numbers varies
    with the SoC generation:
    - 0-2: for Tegra124 and Tegra132
    - 0-3: for Tegra210

  Optional properties:
  - nvidia,internal: A boolean property whose presence determines that a port
    is internal. In the absence of this property the port is considered to be
    external.

  For Tegra124 and Tegra132, the XUSB pad controller exposes the following
  ports:
  - 3x USB2: usb2-0, usb2-1, usb2-2
  - 1x ULPI: ulpi-0
  - 2x HSIC: hsic-0, hsic-1
  - 2x super-speed USB: usb3-0, usb3-1

  For Tegra210, the XUSB pad controller exposes the following ports:
  - 4x USB2: usb2-0, usb2-1, usb2-2, usb2-3
  - 2x HSIC: hsic-0, hsic-1
  - 4x super-speed USB: usb3-0, usb3-1, usb3-2, usb3-3


...
